1. no exception
    @Test
    public void testTransfer() {
        AccountService accountService = new AccountServiceImpl();
        accountService.transfer("from", "to", BigDecimal.ONE);
    }

2. donor amount is reduced by transfer amount:
    @Test
    public void testDonorBalanceIsReducedByTransferAmount() {
        AccountService accountService = new AccountServiceImpl2(new AccountDaoImpl() {

            @Override
            public BigDecimal getBalance(String account) {
                return new BigDecimal("1000.00");
            }
        });
        BigDecimal result = accountService.transfer("donor", "acceptor", new BigDecimal("100.00"));
        if (!new BigDecimal("900.00").equals(result)) {
            throw new AssertionError();
        }
    }

3. donor amount is updated:

    @Test
    public void testUpdatedDonorBalanceIsPersisted() {
        
        final AtomicBoolean donorBalanceWasSet = new AtomicBoolean();
        
        AccountDaoImpl accountDao = new AccountDaoImpl() {
            
            @Override
            public BigDecimal getBalance(String account) {
                return BigDecimal.valueOf(1000.00);
            }

            @Override
            public void setBalance(String account, BigDecimal balance) {
                if (StringUtils.equals(account, "donor") && BigDecimal.valueOf(900.00).equals(balance)) {
                    donorBalanceWasSet.set(true);
                }
            }
        };
        
        AccountServiceImpl3 accountService = new AccountServiceImpl3(accountDao);
        accountService.transfer("donor", "acceptor", BigDecimal.valueOf(100.00));
        
        if (!donorBalanceWasSet.get()) {
            throw new AssertionError();
        }
        
    }

    Refactored to use mocks and asserts:
    
    @Test
    public void testDonorBalanceIsReducedByTransferAmount() {
        
        AccountDao accountDao = EasyMock.createMock(AccountDao.class);
        EasyMock.expect(accountDao.getBalance("donor")).andReturn(BigDecimal.valueOf(1000.00));
        
        EasyMock.replay(accountDao);
        
        AccountService accountService = new AccountServiceImpl3(accountDao);
        BigDecimal donorBalance = accountService.transfer("donor", "acceptor", BigDecimal.valueOf(100.00));
        
        Assert.assertEquals("Donor balance is invalid", BigDecimal.valueOf(900.00), donorBalance);
        
        EasyMock.verify(accountDao);
    }
    
    @Test
    public void testUpdatedDonorBalanceIsPersisted() {
        
        AccountDao accountDao = EasyMock.createMock(AccountDao.class);
        
        EasyMock.expect(accountDao.getBalance("donor")).andReturn(BigDecimal.valueOf(1000.00));
        
        accountDao.setBalance("donor", BigDecimal.valueOf(900.00));
        EasyMock.expectLastCall();
        
        EasyMock.replay(accountDao);
        
        AccountService accountService = new AccountServiceImpl3(accountDao);
        accountService.transfer("donor", "acceptor", BigDecimal.valueOf(100.00));
        
        EasyMock.verify();     
    }

4. Acceptor balance is updated:
    
    @Test
    public void testUpdatedAcceptorBalanceIsPersisted() {
        
        AccountDao accountDao = EasyMock.createNiceMock(AccountDao.class);
        
        EasyMock.expect(accountDao.getBalance("donor")).andReturn(BigDecimal.valueOf(1000.00));
        EasyMock.expect(accountDao.getBalance("acceptor")).andReturn(BigDecimal.ZERO);
        
        accountDao.setBalance("donor", BigDecimal.valueOf(900.00));
        EasyMock.expectLastCall();
        
        accountDao.setBalance("acceptor", BigDecimal.valueOf(100.00));
        EasyMock.expectLastCall();
        
        EasyMock.replay(accountDao);
        
        AccountService accountService = new AccountServiceImpl3(accountDao);
        accountService.transfer("donor", "acceptor", BigDecimal.valueOf(100.00));
        
        EasyMock.verify(accountDao);
    }

5. Donor account is not found:
    
    @Test(expected = AccountNotFoundException.class)
    public void shouldThrowExceptionWhenNoDonorAccountFound() {
        
        AccountDao accountDao = EasyMock.createMock(AccountDao.class);
        
        EasyMock.expect(accountDao.getBalance("donor")).andReturn(null);
        
        EasyMock.replay(accountDao);
        
        AccountService accountService = new AccountServiceImpl4(accountDao);
        accountService.transfer("donor", "acceptor", BigDecimal.valueOf(100.00));
        
        EasyMock.verify(accountDao);        
    }




